{"abi":[{"type":"constructor","inputs":[{"name":"pointsToken","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"TOPK","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"admins","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"award","inputs":[{"name":"user","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"awardBatch","inputs":[{"name":"users","type":"address[]","internalType":"address[]"},{"name":"amounts","type":"uint256[]","internalType":"uint256[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getTop","inputs":[],"outputs":[{"name":"snapshot","type":"tuple[20]","internalType":"struct AdminMinterLeaderboard.Entry[20]","components":[{"name":"user","type":"address","internalType":"address"},{"name":"pts","type":"uint256","internalType":"uint256"}]}],"stateMutability":"view"},{"type":"function","name":"lifetime","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"points","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IPointsToken"}],"stateMutability":"view"},{"type":"function","name":"setAdmin","inputs":[{"name":"user","type":"address","internalType":"address"},{"name":"ok","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"topAt","inputs":[{"name":"idx","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"user","type":"address","internalType":"address"},{"name":"pts","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"event","name":"AdminUpdated","inputs":[{"name":"admin","type":"address","indexed":true,"internalType":"address"},{"name":"enabled","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"Awarded","inputs":[{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"AwardedBatch","inputs":[{"name":"count","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"TopUpdated","inputs":[{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"newScore","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x608060405234801561001057600080fd5b50604051610eb6380380610eb683398101604081905261002f916100e9565b6001600160a01b03811661007b5760405162461bcd60e51b815260206004820152600f60248201526e414d4c3a706f696e74732d7a65726f60881b604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b0383161781553380825260016020818152604093849020805460ff191683179055925190815290917f235bc17e7930760029e9f4d860a2a8089976de5b381cf8380fc11c1d88a11133910160405180910390a250610119565b6000602082840312156100fb57600080fd5b81516001600160a01b038116811461011257600080fd5b9392505050565b610d8e806101286000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80635c2b1119116100665780635c2b1119146101265780635d8a776e1461013b5780637de715d61461014e578063e66acad914610180578063eb7fea38146101a057600080fd5b80631be6dd6414610098578063429b62e5146100c85780634b0bddd2146100fb5780635155602714610110575b600080fd5b6000546100ab906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100eb6100d6366004610b1d565b60016020526000908152604090205460ff1681565b60405190151581526020016100bf565b61010e610109366004610b3f565b6101b3565b005b610118601481565b6040519081526020016100bf565b61012e610291565b6040516100bf9190610b7b565b61010e610149366004610bc2565b6102f7565b61016161015c366004610bec565b610473565b604080516001600160a01b0390931683526020830191909152016100bf565b61011861018e366004610b1d565b60026020526000908152604090205481565b61010e6101ae366004610c51565b6104ff565b3360009081526001602052604090205460ff166101eb5760405162461bcd60e51b81526004016101e290610cc2565b60405180910390fd5b6001600160a01b0382166102325760405162461bcd60e51b815260206004820152600e60248201526d20a6a61d3d32b93796b0b236b4b760911b60448201526064016101e2565b6001600160a01b038216600081815260016020908152604091829020805460ff191685151590811790915591519182527f235bc17e7930760029e9f4d860a2a8089976de5b381cf8380fc11c1d88a11133910160405180910390a25050565b610299610ac7565b604080516102808101909152600360146000835b828210156102ee576040805180820190915260028302850180546001600160a01b0316825260019081015460208084019190915291835290920191016102ad565b50505050905090565b3360009081526001602052604090205460ff166103265760405162461bcd60e51b81526004016101e290610cc2565b6001600160a01b0382161580159061033e5750600081115b61037a5760405162461bcd60e51b815260206004820152600d60248201526c1053530e9898590b585dd85c99609a1b60448201526064016101e2565b6000546040516340c10f1960e01b81526001600160a01b03848116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b1580156103c857600080fd5b505af11580156103dc573d6000803e3d6000fd5b505050506001600160a01b038216600090815260026020526040812054610404908390610cff565b6001600160a01b0384166000908152600260205260409020819055905061042b83826106c8565b826001600160a01b03167fcd8ae3717c1e5ff5eae19e78399c4db942424faf048bca1b2774ac2a7c3d70a58360405161046691815260200190565b60405180910390a2505050565b600080601483106104b05760405162461bcd60e51b81526020600482015260076024820152660829a9874d2c8f60cb1b60448201526064016101e2565b6000600384601481106104c5576104c5610d18565b604080518082019091526002919091029190910180546001600160a01b031680835260019091015460209092018290529590945092505050565b3360009081526001602052604090205460ff1661052e5760405162461bcd60e51b81526004016101e290610cc2565b82818114801561053e5750600081115b61057b5760405162461bcd60e51b815260206004820152600e60248201526d414d4c3a6261642d61727261797360901b60448201526064016101e2565b60005b8181101561068d57600086868381811061059a5761059a610d18565b90506020020160208101906105af9190610b1d565b905060008585848181106105c5576105c5610d18565b6000546040516340c10f1960e01b81526001600160a01b038781166004830152602093909302949094013560248501819052945016916340c10f199150604401600060405180830381600087803b15801561061f57600080fd5b505af1158015610633573d6000803e3d6000fd5b505050506001600160a01b03821660009081526002602052604081205461065b908390610cff565b6001600160a01b0384166000908152600260205260409020819055905061068283826106c8565b50505060010161057e565b506040518181527f043d33061b2c46ea55ef25962109a027b993774ce78558bdc3066c4f2b921d4c9060200160405180910390a15050505050565b60005b601481101561076e57826001600160a01b0316600382601481106106f1576106f1610d18565b60020201546001600160a01b03160361076657816003826014811061071857610718610d18565b600202016001018190555061072b61096b565b826001600160a01b03167f14032b28f4670e4eb29c857016ed213eb3f4b25c9cae5db9c91d2eddf3cb67eb8360405161046691815260200190565b6001016106cb565b506000600019815b60148110156108aa5760006003826014811061079457610794610d18565b60020201546001600160a01b03160361085f576040518060400160405280866001600160a01b0316815260200185815250600382601481106107d8576107d8610d18565b82516002919091029190910180546001600160a01b0319166001600160a01b0390921691909117815560209091015160019091015561081561096b565b846001600160a01b03167f14032b28f4670e4eb29c857016ed213eb3f4b25c9cae5db9c91d2eddf3cb67eb8560405161085091815260200190565b60405180910390a25050505050565b816003826014811061087357610873610d18565b600202016001015410156108a2576003816014811061089457610894610d18565b600202016001015491508092505b600101610776565b5080831115610965576040518060400160405280856001600160a01b0316815260200184815250600383601481106108e4576108e4610d18565b82516002919091029190910180546001600160a01b0319166001600160a01b0390921691909117815560209091015160019091015561092161096b565b836001600160a01b03167f14032b28f4670e4eb29c857016ed213eb3f4b25c9cae5db9c91d2eddf3cb67eb8460405161095c91815260200190565b60405180910390a25b50505050565b60015b6014811015610ac45760006003826014811061098c5761098c610d18565b604080518082019091526002919091029190910180546001600160a01b031682526001015460208201529050815b6000811180156109f15750602082015160036109d7600184610d2e565b601481106109e7576109e7610d18565b6002020160010154105b15610a6e576003610a03600183610d2e565b60148110610a1357610a13610d18565b6002020160038260148110610a2a57610a2a610d18565b82546002919091029190910180546001600160a01b0319166001600160a01b0390921691909117815560019182015491015580610a6681610d41565b9150506109ba565b8160038260148110610a8257610a82610d18565b82516002919091029190910180546001600160a01b0319166001600160a01b0390921691909117815560209091015160019182015592909201915061096e9050565b50565b6040518061028001604052806014905b6040805180820190915260008082526020820152815260200190600190039081610ad75790505090565b80356001600160a01b0381168114610b1857600080fd5b919050565b600060208284031215610b2f57600080fd5b610b3882610b01565b9392505050565b60008060408385031215610b5257600080fd5b610b5b83610b01565b915060208301358015158114610b7057600080fd5b809150509250929050565b6105008101818360005b6014811015610bb957815180516001600160a01b031684526020908101518185015260409093019290910190600101610b85565b50505092915050565b60008060408385031215610bd557600080fd5b610bde83610b01565b946020939093013593505050565b600060208284031215610bfe57600080fd5b5035919050565b60008083601f840112610c1757600080fd5b50813567ffffffffffffffff811115610c2f57600080fd5b6020830191508360208260051b8501011115610c4a57600080fd5b9250929050565b60008060008060408587031215610c6757600080fd5b843567ffffffffffffffff811115610c7e57600080fd5b610c8a87828801610c05565b909550935050602085013567ffffffffffffffff811115610caa57600080fd5b610cb687828801610c05565b95989497509550505050565b6020808252600d908201526c20a6a61d3737ba16b0b236b4b760991b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610d1257610d12610ce9565b92915050565b634e487b7160e01b600052603260045260246000fd5b81810381811115610d1257610d12610ce9565b600081610d5057610d50610ce9565b50600019019056fea26469706673582212207f3d2764c666ed4b1a28444da50b7e6c6bb900ee88ca6b10c1fb047129e643e964736f6c634300081c0033","sourceMap":"211:3385:0:-:0;;;814:227;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;865:25:0;;857:53;;;;-1:-1:-1;;;857:53:0;;511:2:21;857:53:0;;;493:21:21;550:2;530:18;;;523:30;-1:-1:-1;;;569:18:21;;;562:45;624:18;;857:53:0;;;;;;;;920:6;:34;;-1:-1:-1;;;;;;920:34:0;-1:-1:-1;;;;;920:34:0;;;;;971:10;964:18;;;-1:-1:-1;964:18:0;;;;;;;;;:25;;-1:-1:-1;;964:25:0;;;;;1004:30;;793:41:21;;;971:10:0;;1004:30;;766:18:21;1004:30:0;;;;;;;814:227;211:3385;;14:290:21;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:21;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:21:o;653:187::-;211:3385:0;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x608060405234801561001057600080fd5b50600436106100935760003560e01c80635c2b1119116100665780635c2b1119146101265780635d8a776e1461013b5780637de715d61461014e578063e66acad914610180578063eb7fea38146101a057600080fd5b80631be6dd6414610098578063429b62e5146100c85780634b0bddd2146100fb5780635155602714610110575b600080fd5b6000546100ab906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100eb6100d6366004610b1d565b60016020526000908152604090205460ff1681565b60405190151581526020016100bf565b61010e610109366004610b3f565b6101b3565b005b610118601481565b6040519081526020016100bf565b61012e610291565b6040516100bf9190610b7b565b61010e610149366004610bc2565b6102f7565b61016161015c366004610bec565b610473565b604080516001600160a01b0390931683526020830191909152016100bf565b61011861018e366004610b1d565b60026020526000908152604090205481565b61010e6101ae366004610c51565b6104ff565b3360009081526001602052604090205460ff166101eb5760405162461bcd60e51b81526004016101e290610cc2565b60405180910390fd5b6001600160a01b0382166102325760405162461bcd60e51b815260206004820152600e60248201526d20a6a61d3d32b93796b0b236b4b760911b60448201526064016101e2565b6001600160a01b038216600081815260016020908152604091829020805460ff191685151590811790915591519182527f235bc17e7930760029e9f4d860a2a8089976de5b381cf8380fc11c1d88a11133910160405180910390a25050565b610299610ac7565b604080516102808101909152600360146000835b828210156102ee576040805180820190915260028302850180546001600160a01b0316825260019081015460208084019190915291835290920191016102ad565b50505050905090565b3360009081526001602052604090205460ff166103265760405162461bcd60e51b81526004016101e290610cc2565b6001600160a01b0382161580159061033e5750600081115b61037a5760405162461bcd60e51b815260206004820152600d60248201526c1053530e9898590b585dd85c99609a1b60448201526064016101e2565b6000546040516340c10f1960e01b81526001600160a01b03848116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b1580156103c857600080fd5b505af11580156103dc573d6000803e3d6000fd5b505050506001600160a01b038216600090815260026020526040812054610404908390610cff565b6001600160a01b0384166000908152600260205260409020819055905061042b83826106c8565b826001600160a01b03167fcd8ae3717c1e5ff5eae19e78399c4db942424faf048bca1b2774ac2a7c3d70a58360405161046691815260200190565b60405180910390a2505050565b600080601483106104b05760405162461bcd60e51b81526020600482015260076024820152660829a9874d2c8f60cb1b60448201526064016101e2565b6000600384601481106104c5576104c5610d18565b604080518082019091526002919091029190910180546001600160a01b031680835260019091015460209092018290529590945092505050565b3360009081526001602052604090205460ff1661052e5760405162461bcd60e51b81526004016101e290610cc2565b82818114801561053e5750600081115b61057b5760405162461bcd60e51b815260206004820152600e60248201526d414d4c3a6261642d61727261797360901b60448201526064016101e2565b60005b8181101561068d57600086868381811061059a5761059a610d18565b90506020020160208101906105af9190610b1d565b905060008585848181106105c5576105c5610d18565b6000546040516340c10f1960e01b81526001600160a01b038781166004830152602093909302949094013560248501819052945016916340c10f199150604401600060405180830381600087803b15801561061f57600080fd5b505af1158015610633573d6000803e3d6000fd5b505050506001600160a01b03821660009081526002602052604081205461065b908390610cff565b6001600160a01b0384166000908152600260205260409020819055905061068283826106c8565b50505060010161057e565b506040518181527f043d33061b2c46ea55ef25962109a027b993774ce78558bdc3066c4f2b921d4c9060200160405180910390a15050505050565b60005b601481101561076e57826001600160a01b0316600382601481106106f1576106f1610d18565b60020201546001600160a01b03160361076657816003826014811061071857610718610d18565b600202016001018190555061072b61096b565b826001600160a01b03167f14032b28f4670e4eb29c857016ed213eb3f4b25c9cae5db9c91d2eddf3cb67eb8360405161046691815260200190565b6001016106cb565b506000600019815b60148110156108aa5760006003826014811061079457610794610d18565b60020201546001600160a01b03160361085f576040518060400160405280866001600160a01b0316815260200185815250600382601481106107d8576107d8610d18565b82516002919091029190910180546001600160a01b0319166001600160a01b0390921691909117815560209091015160019091015561081561096b565b846001600160a01b03167f14032b28f4670e4eb29c857016ed213eb3f4b25c9cae5db9c91d2eddf3cb67eb8560405161085091815260200190565b60405180910390a25050505050565b816003826014811061087357610873610d18565b600202016001015410156108a2576003816014811061089457610894610d18565b600202016001015491508092505b600101610776565b5080831115610965576040518060400160405280856001600160a01b0316815260200184815250600383601481106108e4576108e4610d18565b82516002919091029190910180546001600160a01b0319166001600160a01b0390921691909117815560209091015160019091015561092161096b565b836001600160a01b03167f14032b28f4670e4eb29c857016ed213eb3f4b25c9cae5db9c91d2eddf3cb67eb8460405161095c91815260200190565b60405180910390a25b50505050565b60015b6014811015610ac45760006003826014811061098c5761098c610d18565b604080518082019091526002919091029190910180546001600160a01b031682526001015460208201529050815b6000811180156109f15750602082015160036109d7600184610d2e565b601481106109e7576109e7610d18565b6002020160010154105b15610a6e576003610a03600183610d2e565b60148110610a1357610a13610d18565b6002020160038260148110610a2a57610a2a610d18565b82546002919091029190910180546001600160a01b0319166001600160a01b0390921691909117815560019182015491015580610a6681610d41565b9150506109ba565b8160038260148110610a8257610a82610d18565b82516002919091029190910180546001600160a01b0319166001600160a01b0390921691909117815560209091015160019182015592909201915061096e9050565b50565b6040518061028001604052806014905b6040805180820190915260008082526020820152815260200190600190039081610ad75790505090565b80356001600160a01b0381168114610b1857600080fd5b919050565b600060208284031215610b2f57600080fd5b610b3882610b01565b9392505050565b60008060408385031215610b5257600080fd5b610b5b83610b01565b915060208301358015158114610b7057600080fd5b809150509250929050565b6105008101818360005b6014811015610bb957815180516001600160a01b031684526020908101518185015260409093019290910190600101610b85565b50505092915050565b60008060408385031215610bd557600080fd5b610bde83610b01565b946020939093013593505050565b600060208284031215610bfe57600080fd5b5035919050565b60008083601f840112610c1757600080fd5b50813567ffffffffffffffff811115610c2f57600080fd5b6020830191508360208260051b8501011115610c4a57600080fd5b9250929050565b60008060008060408587031215610c6757600080fd5b843567ffffffffffffffff811115610c7e57600080fd5b610c8a87828801610c05565b909550935050602085013567ffffffffffffffff811115610caa57600080fd5b610cb687828801610c05565b95989497509550505050565b6020808252600d908201526c20a6a61d3737ba16b0b236b4b760991b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610d1257610d12610ce9565b92915050565b634e487b7160e01b600052603260045260246000fd5b81810381811115610d1257610d12610ce9565b600081610d5057610d50610ce9565b50600019019056fea26469706673582212207f3d2764c666ed4b1a28444da50b7e6c6bb900ee88ca6b10c1fb047129e643e964736f6c634300081c0033","sourceMap":"211:3385:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;249:26;;;;;-1:-1:-1;;;;;249:26:0;;;;;;-1:-1:-1;;;;;197:32:21;;;179:51;;167:2;152:18;249:26:0;;;;;;;;281:38;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;775:14:21;;768:22;750:41;;738:2;723:18;281:38:0;610:187:21;1047:186:0;;;;;;:::i;:::-;;:::i;:::-;;326:33;;357:2;326:33;;;;;1300:25:21;;;1288:2;1273:18;326:33:0;1154:177:21;2097:98:0;;;:::i;:::-;;;;;;;:::i;1239:338::-;;;;;;:::i;:::-;;:::i;2201:193::-;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;2701:32:21;;;2683:51;;2765:2;2750:18;;2743:34;;;;2656:18;2201:193:0;2509:274:21;366:43:0;;;;;;:::i;:::-;;;;;;;;;;;;;;1583:508;;;;;;:::i;:::-;;:::i;1047:186::-;761:10;754:18;;;;:6;:18;;;;;;;;746:44;;;;-1:-1:-1;;;746:44:0;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;1125:18:0;::::1;1117:45;;;::::0;-1:-1:-1;;;1117:45:0;;4477:2:21;1117:45:0::1;::::0;::::1;4459:21:21::0;4516:2;4496:18;;;4489:30;-1:-1:-1;;;4535:18:21;;;4528:44;4589:18;;1117:45:0::1;4275:338:21::0;1117:45:0::1;-1:-1:-1::0;;;;;1172:12:0;::::1;;::::0;;;:6:::1;:12;::::0;;;;;;;;:17;;-1:-1:-1;;1172:17:0::1;::::0;::::1;;::::0;;::::1;::::0;;;1204:22;;750:41:21;;;1204:22:0::1;::::0;723:18:21;1204:22:0::1;;;;;;;1047:186:::0;;:::o;2097:98::-;2138:27;;:::i;:::-;2177:11;;;;;;;;;2184:4;2177:11;-1:-1:-1;2177:11:0;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2177:11:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2097:98;:::o;1239:338::-;761:10;754:18;;;;:6;:18;;;;;;;;746:44;;;;-1:-1:-1;;;746:44:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;1319:18:0;::::1;::::0;;::::1;::::0;:32:::1;;;1350:1;1341:6;:10;1319:32;1311:58;;;::::0;-1:-1:-1;;;1311:58:0;;4820:2:21;1311:58:0::1;::::0;::::1;4802:21:21::0;4859:2;4839:18;;;4832:30;-1:-1:-1;;;4878:18:21;;;4871:43;4931:18;;1311:58:0::1;4618:337:21::0;1311:58:0::1;1379:6;::::0;:25:::1;::::0;-1:-1:-1;;;1379:25:0;;-1:-1:-1;;;;;2701:32:21;;;1379:25:0::1;::::0;::::1;2683:51:21::0;2750:18;;;2743:34;;;1379:6:0;;::::1;::::0;:11:::1;::::0;2656:18:21;;1379:25:0::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;;;;;;;;1434:14:0;::::1;1415:16;1434:14:::0;;;:8:::1;:14;::::0;;;;;:23:::1;::::0;1451:6;;1434:23:::1;:::i;:::-;-1:-1:-1::0;;;;;1467:14:0;::::1;;::::0;;;:8:::1;:14;::::0;;;;:25;;;1415:42;-1:-1:-1;1503:31:0::1;1476:4:::0;1415:42;1503:15:::1;:31::i;:::-;1557:4;-1:-1:-1::0;;;;;1549:21:0::1;;1563:6;1549:21;;;;1300:25:21::0;;1288:2;1273:18;;1154:177;1549:21:0::1;;;;;;;;1301:276;1239:338:::0;;:::o;2201:193::-;2252:12;2266:11;357:2;2297:3;:10;2289:30;;;;-1:-1:-1;;;2289:30:0;;5424:2:21;2289:30:0;;;5406:21:21;5463:1;5443:18;;;5436:29;-1:-1:-1;;;5481:18:21;;;5474:37;5528:18;;2289:30:0;5222:330:21;2289:30:0;2329:14;2346:4;2351:3;2346:9;;;;;;;:::i;:::-;2329:26;;;;;;;;;2346:9;;;;;;;;;2329:26;;-1:-1:-1;;;;;2329:26:0;;;;;;;;;;;;;;;;;;;-1:-1:-1;2201:193:0;-1:-1:-1;;;2201:193:0:o;1583:508::-;761:10;754:18;;;;:6;:18;;;;;;;;746:44;;;;-1:-1:-1;;;746:44:0;;;;;;;:::i;:::-;1698:5;1728:19;;::::1;:28:::0;::::1;;;;1755:1;1751;:5;1728:28;1720:55;;;::::0;-1:-1:-1;;;1720:55:0;;5891:2:21;1720:55:0::1;::::0;::::1;5873:21:21::0;5930:2;5910:18;;;5903:30;-1:-1:-1;;;5949:18:21;;;5942:44;6003:18;;1720:55:0::1;5689:338:21::0;1720:55:0::1;1790:9;1785:270;1809:1;1805;:5;1785:270;;;1831:9;1843:5;;1849:1;1843:8;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;1831:20;;1865:9;1877:7;;1885:1;1877:10;;;;;;;:::i;:::-;1901:6;::::0;:17:::1;::::0;-1:-1:-1;;;1901:17:0;;-1:-1:-1;;;;;2701:32:21;;;1901:17:0::1;::::0;::::1;2683:51:21::0;1877:10:0::1;::::0;;;::::1;::::0;;;::::1;;2750:18:21::0;;;2743:34;;;1877:10:0;-1:-1:-1;1901:6:0::1;::::0;:11:::1;::::0;-1:-1:-1;2656:18:21;;1901:17:0::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;;;;;;;;1951:11:0;::::1;1932:16;1951:11:::0;;;:8:::1;:11;::::0;;;;;:15:::1;::::0;1965:1;;1951:15:::1;:::i;:::-;-1:-1:-1::0;;;;;1980:11:0;::::1;;::::0;;;:8:::1;:11;::::0;;;;:22;;;1932:34;-1:-1:-1;2016:28:0::1;1989:1:::0;1932:34;2016:15:::1;:28::i;:::-;-1:-1:-1::0;;;1812:3:0::1;;1785:270;;;-1:-1:-1::0;2069:15:0::1;::::0;1300:25:21;;;2069:15:0::1;::::0;1288:2:21;1273:18;2069:15:0::1;;;;;;;1676:415;1583:508:::0;;;;:::o;2400:873::-;2478:9;2473:234;357:2;2493:1;:8;2473:234;;;2542:4;-1:-1:-1;;;;;2526:20:0;:4;2531:1;2526:7;;;;;;;:::i;:::-;;;;:12;-1:-1:-1;;;;;2526:12:0;:20;2522:175;;2580:5;2566:4;2571:1;2566:7;;;;;;;:::i;:::-;;;;:11;;:19;;;;2603:9;:7;:9::i;:::-;2646:4;-1:-1:-1;;;;;2635:23:0;;2652:5;2635:23;;;;1300:25:21;;1288:2;1273:18;;1154:177;2522:175:0;2503:3;;2473:234;;;-1:-1:-1;2717:14:0;-1:-1:-1;;2717:14:0;2789:325;357:2;2809:1;:8;2789:325;;;2866:1;2842:4;2847:1;2842:7;;;;;;;:::i;:::-;;;;:12;-1:-1:-1;;;;;2842:12:0;:26;2838:190;;2898:18;;;;;;;;2904:4;-1:-1:-1;;;;;2898:18:0;;;;;2910:5;2898:18;;;2888:4;2893:1;2888:7;;;;;;;:::i;:::-;:28;;:7;;;;;;;;;:28;;-1:-1:-1;;;;;;2888:28:0;-1:-1:-1;;;;;2888:28:0;;;;;;;;;;;;;;-1:-1:-1;2888:28:0;;;;2934:9;:7;:9::i;:::-;2977:4;-1:-1:-1;;;;;2966:23:0;;2983:5;2966:23;;;;1300:25:21;;1288:2;1273:18;;1154:177;2966:23:0;;;;;;;;3007:7;;;2400:873;;:::o;2838:190::-;3059:6;3045:4;3050:1;3045:7;;;;;;;:::i;:::-;;;;:11;;;:20;3041:63;;;3078:4;3083:1;3078:7;;;;;;;:::i;:::-;;;;:11;;;3069:20;;3100:1;3091:10;;3041:63;2819:3;;2789:325;;;;3136:6;3128:5;:14;3124:143;;;3173:18;;;;;;;;3179:4;-1:-1:-1;;;;;3173:18:0;;;;;3185:5;3173:18;;;3158:4;3163:6;3158:12;;;;;;;:::i;:::-;:33;;:12;;;;;;;;;:33;;-1:-1:-1;;;;;;3158:33:0;-1:-1:-1;;;;;3158:33:0;;;;;;;;;;;;;;-1:-1:-1;3158:33:0;;;;3205:9;:7;:9::i;:::-;3244:4;-1:-1:-1;;;;;3233:23:0;;3250:5;3233:23;;;;1300:25:21;;1288:2;1273:18;;1154:177;3233:23:0;;;;;;;;3124:143;2463:810;;2400:873;;:::o;3279:315::-;3334:1;3317:271;357:2;3337:1;:8;3317:271;;;3366:16;3385:4;3390:1;3385:7;;;;;;;:::i;:::-;3366:26;;;;;;;;;3385:7;;;;;;;;;3366:26;;-1:-1:-1;;;;;3366:26:0;;;;;;;;;;;-1:-1:-1;3418:1:0;3433:118;3444:1;3440;:5;:34;;;;-1:-1:-1;3467:7:0;;;;3449:4;3454:5;3458:1;3454;:5;:::i;:::-;3449:11;;;;;;;:::i;:::-;;;;:15;;;:25;3440:34;3433:118;;;3504:4;3509:5;3513:1;3509;:5;:::i;:::-;3504:11;;;;;;;:::i;:::-;;;;3494:4;3499:1;3494:7;;;;;;;:::i;:::-;:21;;:7;;;;;;;;;:21;;-1:-1:-1;;;;;;3494:21:0;-1:-1:-1;;;;;3494:21:0;;;;;;;;;;;;;;;;;3533:3;;;;:::i;:::-;;;;3433:118;;;3574:3;3564:4;3569:1;3564:7;;;;;;;:::i;:::-;:13;;:7;;;;;;;;;:13;;-1:-1:-1;;;;;;3564:13:0;-1:-1:-1;;;;;3564:13:0;;;;;;;;;;;;;;-1:-1:-1;3564:13:0;;;;3347:3;;;;;-1:-1:-1;3317:271:0;;-1:-1:-1;3317:271:0;;;3279:315::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;241:173:21:-;309:20;;-1:-1:-1;;;;;358:31:21;;348:42;;338:70;;404:1;401;394:12;338:70;241:173;;;:::o;419:186::-;478:6;531:2;519:9;510:7;506:23;502:32;499:52;;;547:1;544;537:12;499:52;570:29;589:9;570:29;:::i;:::-;560:39;419:186;-1:-1:-1;;;419:186:21:o;802:347::-;867:6;875;928:2;916:9;907:7;903:23;899:32;896:52;;;944:1;941;934:12;896:52;967:29;986:9;967:29;:::i;:::-;957:39;;1046:2;1035:9;1031:18;1018:32;1093:5;1086:13;1079:21;1072:5;1069:32;1059:60;;1115:1;1112;1105:12;1059:60;1138:5;1128:15;;;802:347;;;;;:::o;1336:632::-;1560:4;1545:20;;1549:9;1642:6;1518:4;1676:286;1690:4;1687:1;1684:11;1676:286;;;1747:13;;1789:9;;-1:-1:-1;;;;;1785:35:21;1773:48;;1871:4;1863:13;;;1857:20;1841:14;;;1834:44;1907:4;1898:14;;;;1935:17;;;;1817:1;1703:9;1676:286;;;1680:3;;;1336:632;;;;:::o;1973:300::-;2041:6;2049;2102:2;2090:9;2081:7;2077:23;2073:32;2070:52;;;2118:1;2115;2108:12;2070:52;2141:29;2160:9;2141:29;:::i;:::-;2131:39;2239:2;2224:18;;;;2211:32;;-1:-1:-1;;;1973:300:21:o;2278:226::-;2337:6;2390:2;2378:9;2369:7;2365:23;2361:32;2358:52;;;2406:1;2403;2396:12;2358:52;-1:-1:-1;2451:23:21;;2278:226;-1:-1:-1;2278:226:21:o;2788:367::-;2851:8;2861:6;2915:3;2908:4;2900:6;2896:17;2892:27;2882:55;;2933:1;2930;2923:12;2882:55;-1:-1:-1;2956:20:21;;2999:18;2988:30;;2985:50;;;3031:1;3028;3021:12;2985:50;3068:4;3060:6;3056:17;3044:29;;3128:3;3121:4;3111:6;3108:1;3104:14;3096:6;3092:27;3088:38;3085:47;3082:67;;;3145:1;3142;3135:12;3082:67;2788:367;;;;;:::o;3160:768::-;3282:6;3290;3298;3306;3359:2;3347:9;3338:7;3334:23;3330:32;3327:52;;;3375:1;3372;3365:12;3327:52;3415:9;3402:23;3448:18;3440:6;3437:30;3434:50;;;3480:1;3477;3470:12;3434:50;3519:70;3581:7;3572:6;3561:9;3557:22;3519:70;:::i;:::-;3608:8;;-1:-1:-1;3493:96:21;-1:-1:-1;;3696:2:21;3681:18;;3668:32;3725:18;3712:32;;3709:52;;;3757:1;3754;3747:12;3709:52;3796:72;3860:7;3849:8;3838:9;3834:24;3796:72;:::i;:::-;3160:768;;;;-1:-1:-1;3887:8:21;-1:-1:-1;;;;3160:768:21:o;3933:337::-;4135:2;4117:21;;;4174:2;4154:18;;;4147:30;-1:-1:-1;;;4208:2:21;4193:18;;4186:43;4261:2;4246:18;;3933:337::o;4960:127::-;5021:10;5016:3;5012:20;5009:1;5002:31;5052:4;5049:1;5042:15;5076:4;5073:1;5066:15;5092:125;5157:9;;;5178:10;;;5175:36;;;5191:18;;:::i;:::-;5092:125;;;;:::o;5557:127::-;5618:10;5613:3;5609:20;5606:1;5599:31;5649:4;5646:1;5639:15;5673:4;5670:1;5663:15;6032:128;6099:9;;;6120:11;;;6117:37;;;6134:18;;:::i;6165:136::-;6204:3;6232:5;6222:39;;6241:18;;:::i;:::-;-1:-1:-1;;;6277:18:21;;6165:136::o","linkReferences":{}},"methodIdentifiers":{"TOPK()":"51556027","admins(address)":"429b62e5","award(address,uint256)":"5d8a776e","awardBatch(address[],uint256[])":"eb7fea38","getTop()":"5c2b1119","lifetime(address)":"e66acad9","points()":"1be6dd64","setAdmin(address,bool)":"4b0bddd2","topAt(uint256)":"7de715d6"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pointsToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Awarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"AwardedBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newScore\",\"type\":\"uint256\"}],\"name\":\"TopUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOPK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"award\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"awardBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTop\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pts\",\"type\":\"uint256\"}],\"internalType\":\"struct AdminMinterLeaderboard.Entry[20]\",\"name\":\"snapshot\",\"type\":\"tuple[20]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lifetime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"points\",\"outputs\":[{\"internalType\":\"contract IPointsToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"topAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AdminMinterLeaderboard.sol\":\"AdminMinterLeaderboard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":forge-std/=node_modules/forge-std/src/\"]},\"sources\":{\"contracts/AdminMinterLeaderboard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IPointsToken {\\n    function mint(address to, uint256 amount) external;\\n    function balanceOf(address who) external view returns (uint256);\\n}\\n\\ncontract AdminMinterLeaderboard {\\n    IPointsToken public points;\\n    mapping(address => bool) public admins;\\n\\n    uint256 public constant TOPK = 20;\\n\\n    mapping(address => uint256) public lifetime;\\n\\n    struct Entry { address user; uint256 pts; }\\n    Entry[TOPK] private _top;\\n\\n    event AdminUpdated(address indexed admin, bool enabled);\\n    event Awarded(address indexed user, uint256 amount);\\n    event AwardedBatch(uint256 count);\\n    event TopUpdated(address indexed user, uint256 newScore);\\n\\n    modifier onlyAdmin() {\\n        require(admins[msg.sender], \\\"AML:not-admin\\\");\\n        _;\\n    }\\n\\n    constructor(address pointsToken) {\\n        require(pointsToken != address(0), \\\"AML:points-zero\\\");\\n        points = IPointsToken(pointsToken);\\n        admins[msg.sender] = true;\\n        emit AdminUpdated(msg.sender, true);\\n    }\\n\\n    function setAdmin(address user, bool ok) external onlyAdmin {\\n        require(user != address(0), \\\"AML:zero-admin\\\");\\n        admins[user] = ok;\\n        emit AdminUpdated(user, ok);\\n    }\\n\\n    function award(address user, uint256 amount) public onlyAdmin {\\n        require(user != address(0) && amount > 0, \\\"AML:bad-award\\\");\\n        points.mint(user, amount);\\n\\n        uint256 newScore = lifetime[user] + amount;\\n        lifetime[user] = newScore;\\n\\n        _maybeInsertTop(user, newScore);\\n        emit Awarded(user, amount);\\n    }\\n\\n    function awardBatch(address[] calldata users, uint256[] calldata amounts) external onlyAdmin {\\n        uint256 n = users.length;\\n        require(n == amounts.length && n > 0, \\\"AML:bad-arrays\\\");\\n        for (uint256 i = 0; i < n; i++) {\\n            address u = users[i];\\n            uint256 a = amounts[i];\\n            points.mint(u, a);\\n            uint256 newScore = lifetime[u] + a;\\n            lifetime[u] = newScore;\\n            _maybeInsertTop(u, newScore);\\n        }\\n        emit AwardedBatch(n);\\n    }\\n\\n    function getTop() external view returns (Entry[TOPK] memory snapshot) {\\n        return _top;\\n    }\\n\\n    function topAt(uint256 idx) external view returns (address user, uint256 pts) {\\n        require(idx < TOPK, \\\"AML:idx\\\");\\n        Entry memory e = _top[idx];\\n        return (e.user, e.pts);\\n    }\\n\\n    function _maybeInsertTop(address user, uint256 score) internal {\\n        for (uint256 i = 0; i < TOPK; i++) {\\n            if (_top[i].user == user) {\\n                _top[i].pts = score;\\n                _resort();\\n                emit TopUpdated(user, score);\\n                return;\\n            }\\n        }\\n\\n        uint256 idxMin = 0;\\n        uint256 minPts = type(uint256).max;\\n        for (uint256 i = 0; i < TOPK; i++) {\\n            if (_top[i].user == address(0)) {\\n                _top[i] = Entry(user, score);\\n                _resort();\\n                emit TopUpdated(user, score);\\n                return;\\n            }\\n            if (_top[i].pts < minPts) { minPts = _top[i].pts; idxMin = i; }\\n        }\\n\\n        if (score > minPts) {\\n            _top[idxMin] = Entry(user, score);\\n            _resort();\\n            emit TopUpdated(user, score);\\n        }\\n    }\\n\\n    function _resort() internal {\\n        for (uint256 i = 1; i < TOPK; i++) {\\n            Entry memory key = _top[i];\\n            uint256 j = i;\\n            while (j > 0 && _top[j - 1].pts < key.pts) {\\n                _top[j] = _top[j - 1];\\n                j--;\\n            }\\n            _top[j] = key;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x48b29e6ee90ffdd8e7e40d0a915608c53692403e68a824a666ec60bb7c5f8b7f\",\"license\":\"MIT\"}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"pointsToken","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"admin","type":"address","indexed":true},{"internalType":"bool","name":"enabled","type":"bool","indexed":false}],"type":"event","name":"AdminUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"user","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false}],"type":"event","name":"Awarded","anonymous":false},{"inputs":[{"internalType":"uint256","name":"count","type":"uint256","indexed":false}],"type":"event","name":"AwardedBatch","anonymous":false},{"inputs":[{"internalType":"address","name":"user","type":"address","indexed":true},{"internalType":"uint256","name":"newScore","type":"uint256","indexed":false}],"type":"event","name":"TopUpdated","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"TOPK","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function","name":"admins","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"award"},{"inputs":[{"internalType":"address[]","name":"users","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function","name":"awardBatch"},{"inputs":[],"stateMutability":"view","type":"function","name":"getTop","outputs":[{"internalType":"struct AdminMinterLeaderboard.Entry[20]","name":"snapshot","type":"tuple[20]","components":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"pts","type":"uint256"}]}]},{"inputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function","name":"lifetime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"points","outputs":[{"internalType":"contract IPointsToken","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"bool","name":"ok","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setAdmin"},{"inputs":[{"internalType":"uint256","name":"idx","type":"uint256"}],"stateMutability":"view","type":"function","name":"topAt","outputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"pts","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/=node_modules/@openzeppelin/","forge-std/=node_modules/forge-std/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"useLiteralContent":true,"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/AdminMinterLeaderboard.sol":"AdminMinterLeaderboard"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/AdminMinterLeaderboard.sol":{"keccak256":"0x48b29e6ee90ffdd8e7e40d0a915608c53692403e68a824a666ec60bb7c5f8b7f","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ninterface IPointsToken {\n    function mint(address to, uint256 amount) external;\n    function balanceOf(address who) external view returns (uint256);\n}\n\ncontract AdminMinterLeaderboard {\n    IPointsToken public points;\n    mapping(address => bool) public admins;\n\n    uint256 public constant TOPK = 20;\n\n    mapping(address => uint256) public lifetime;\n\n    struct Entry { address user; uint256 pts; }\n    Entry[TOPK] private _top;\n\n    event AdminUpdated(address indexed admin, bool enabled);\n    event Awarded(address indexed user, uint256 amount);\n    event AwardedBatch(uint256 count);\n    event TopUpdated(address indexed user, uint256 newScore);\n\n    modifier onlyAdmin() {\n        require(admins[msg.sender], \"AML:not-admin\");\n        _;\n    }\n\n    constructor(address pointsToken) {\n        require(pointsToken != address(0), \"AML:points-zero\");\n        points = IPointsToken(pointsToken);\n        admins[msg.sender] = true;\n        emit AdminUpdated(msg.sender, true);\n    }\n\n    function setAdmin(address user, bool ok) external onlyAdmin {\n        require(user != address(0), \"AML:zero-admin\");\n        admins[user] = ok;\n        emit AdminUpdated(user, ok);\n    }\n\n    function award(address user, uint256 amount) public onlyAdmin {\n        require(user != address(0) && amount > 0, \"AML:bad-award\");\n        points.mint(user, amount);\n\n        uint256 newScore = lifetime[user] + amount;\n        lifetime[user] = newScore;\n\n        _maybeInsertTop(user, newScore);\n        emit Awarded(user, amount);\n    }\n\n    function awardBatch(address[] calldata users, uint256[] calldata amounts) external onlyAdmin {\n        uint256 n = users.length;\n        require(n == amounts.length && n > 0, \"AML:bad-arrays\");\n        for (uint256 i = 0; i < n; i++) {\n            address u = users[i];\n            uint256 a = amounts[i];\n            points.mint(u, a);\n            uint256 newScore = lifetime[u] + a;\n            lifetime[u] = newScore;\n            _maybeInsertTop(u, newScore);\n        }\n        emit AwardedBatch(n);\n    }\n\n    function getTop() external view returns (Entry[TOPK] memory snapshot) {\n        return _top;\n    }\n\n    function topAt(uint256 idx) external view returns (address user, uint256 pts) {\n        require(idx < TOPK, \"AML:idx\");\n        Entry memory e = _top[idx];\n        return (e.user, e.pts);\n    }\n\n    function _maybeInsertTop(address user, uint256 score) internal {\n        for (uint256 i = 0; i < TOPK; i++) {\n            if (_top[i].user == user) {\n                _top[i].pts = score;\n                _resort();\n                emit TopUpdated(user, score);\n                return;\n            }\n        }\n\n        uint256 idxMin = 0;\n        uint256 minPts = type(uint256).max;\n        for (uint256 i = 0; i < TOPK; i++) {\n            if (_top[i].user == address(0)) {\n                _top[i] = Entry(user, score);\n                _resort();\n                emit TopUpdated(user, score);\n                return;\n            }\n            if (_top[i].pts < minPts) { minPts = _top[i].pts; idxMin = i; }\n        }\n\n        if (score > minPts) {\n            _top[idxMin] = Entry(user, score);\n            _resort();\n            emit TopUpdated(user, score);\n        }\n    }\n\n    function _resort() internal {\n        for (uint256 i = 1; i < TOPK; i++) {\n            Entry memory key = _top[i];\n            uint256 j = i;\n            while (j > 0 && _top[j - 1].pts < key.pts) {\n                _top[j] = _top[j - 1];\n                j--;\n            }\n            _top[j] = key;\n        }\n    }\n}\n","license":"MIT"}},"version":1},"id":0}